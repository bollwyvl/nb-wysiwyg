{"version":3,"file":"scribe-plugin-code-command.min.js","mappings":"AAAA,OAAA,gCAAA,WAQA,MAAA,YACA,MAAA,UAAA,GACA,GAAA,GAAA,GAAA,GAAA,IAAA,cAAA,OAAA,OAEA,GAAA,QAAA,WACA,EAAA,mBAAA,IAAA,WAGA,GAAA,GAAA,GAAA,GAAA,IAAA,UACA,EAAA,EAAA,MAEA,EAAA,EAAA,kBAEA,EAAA,SAAA,cAAA,OACA,GAAA,YAAA,GAEA,EAAA,WAAA,GAEA,EAAA,WAAA,GAGA,EAAA,UAAA,kBACA,EAAA,UAAA,SAAA,MAQA,EAAA,WAAA,WACA,GAAA,GAAA,GAAA,GAAA,IAAA,SACA,SAAA,EAAA,cAAA,SAAA,GACA,MAAA,GAAA,WAAA,KAAA,UACA,KAAA,QAOA,EAAA,aAAA,WACA,GAAA,GAAA,GAAA,GAAA,IAAA,UACA,EAAA,EAAA,KAGA,QAAA,EAAA,WAGA,EAAA,SAAA,KAAA","sources":["../src/plugins/scribe-plugin-code-command.js"],"sourcesContent":["define('scribe-plugin-code-command',[],function () {\n\n  /**\n   * Adds a command for using CODEs.\n   */\n\n  'use strict';\n\n  return function () {\n    return function (scribe) {\n      var codeCommand = new scribe.api.SimpleCommand('code', 'CODE');\n\n      codeCommand.execute = function () {\n        scribe.transactionManager.run(function () {\n          // TODO: When this command supports all types of ranges we can abstract\n          // it and use it for any command that applies inline styles.\n          var selection = new scribe.api.Selection();\n          var range = selection.range;\n\n          var selectedHtmlDocumentFragment = range.extractContents();\n\n          var codeElement = document.createElement('code');\n          codeElement.appendChild(selectedHtmlDocumentFragment);\n\n          range.insertNode(codeElement);\n\n          range.selectNode(codeElement);\n\n          // Re-apply the range\n          selection.selection.removeAllRanges();\n          selection.selection.addRange(range);\n        });\n      };\n\n      // There is no native command for CODE elements, so we have to provide\n      // our own `queryState` method.\n      // TODO: Find a way to make it explicit what the sequence of commands will\n      // be.\n      codeCommand.queryState = function () {\n        var selection = new scribe.api.Selection();\n        return !! selection.getContaining(function (node) {\n          return node.nodeName === this.nodeName;\n        }.bind(this));\n      };\n\n      // There is no native command for CODE elements, so we have to provide\n      // our own `queryEnabled` method.\n      // TODO: Find a way to make it explicit what the sequence of commands will\n      // be.\n      codeCommand.queryEnabled = function () {\n        var selection = new scribe.api.Selection();\n        var range = selection.range;\n\n        // TODO: Support uncollapsed ranges\n        return ! range.collapsed;\n      };\n\n      scribe.commands.code = codeCommand;\n    };\n  };\n\n});\n\n"],"names":[]}